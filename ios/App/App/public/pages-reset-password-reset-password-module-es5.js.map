{"version":3,"sources":["webpack:///src/app/pages/reset-password/reset-password-routing.module.ts","webpack:///src/app/pages/reset-password/reset-password.page.scss","webpack:///src/app/pages/reset-password/reset-password.module.ts","webpack:///src/app/pages/reset-password/reset-password.page.html","webpack:///src/app/pages/reset-password/reset-password.page.ts"],"names":["routes","path","component","ResetPasswordPageRoutingModule","imports","forChild","exports","ResetPasswordPageModule","declarations","ResetPasswordPage","http","navCtrl","formBuilder","customValidator","platform","passwordInput","passwordConfirmInput","validation_messages","type","message","resetForm","group","password","compose","maxLength","required","passwordRepeat","validator","passwordMatchValidator","console","log","value","selector","getQueryParam","valid","obj","func","post","JSON","stringify","subscribe","data","result","template"],"mappings":"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","file":"pages-reset-password-reset-password-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ResetPasswordPageRoutingModule {}\n","export default \".validation-errors {\\n  color: red;\\n  margin: 10px;\\n  font-size: 75%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Jlc2V0LXBhc3N3b3JkLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtBQUNKIiwiZmlsZSI6InJlc2V0LXBhc3N3b3JkLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi52YWxpZGF0aW9uLWVycm9yc3tcbiAgICBjb2xvcjogcmVkOyBcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgZm9udC1zaXplOiA3NSU7XG59Il19 */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';  \n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ResetPasswordPageRoutingModule } from './reset-password-routing.module';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    ReactiveFormsModule,\n    ResetPasswordPageRoutingModule\n  ],\n  declarations: [ResetPasswordPage]\n})\nexport class ResetPasswordPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title style=\\\"padding: 0;\\\">\\n        Reset Password\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n <!-- The required elements will not proceed unless they are filled out  -->\\n <form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"validatePasswordReset()\\\" novalidate>\\n   \\n  <!--\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input formControlName=\\\"email\\\" type=\\\"text\\\" required></ion-input>\\n    </ion-item>\\n\\n  -->\\n    \\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"resetForm.get('email').hasError(validation.type) && (resetForm.get('email').dirty || resetForm.get('email').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <!-- type password allows it to appear encrypted and not be visible upon entering -->\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">New Password</ion-label>\\n      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\" required></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"resetForm.get('password').hasError(validation.type) && (resetForm.get('password').dirty || resetForm.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Confirm New Password</ion-label>\\n      <ion-input formControlName=\\\"passwordRepeat\\\" type=\\\"password\\\" required></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"resetForm.get('passwordRepeat').hasError('passwordMismatch')\\\">\\n        Passwords Don't Match\\n        </div>\\n        <div class=\\\"error-message\\\" *ngIf=\\\"resetForm.get('password').hasError(validation.type) && (resetForm.get('password').dirty || resetForm.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-row>\\n      <ion-col>\\n        <ion-button aria-label=\\\"change password\\\" type=\\\"submit\\\" color=\\\"success\\\" expand=\\\"block\\\">Change Password</ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </form>\\n\\n</ion-content>\\n\";","import { Component, OnInit } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { HttpClient} from '@angular/common/http';\nimport { NavController } from '@ionic/angular'; \nimport { FormGroup, FormBuilder, Validators, FormControl } from \"@angular/forms\";\nimport { CustomValidationService } from 'src/app/services/custom-validation.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.page.html',\n  styleUrls: ['./reset-password.page.scss'],\n})\nexport class ResetPasswordPage{\n\n  passwordInput: string = \"\";\n  passwordConfirmInput: string = \"\";\n  resetForm: FormGroup;\n  myControl: FormControl;\n\n  constructor(public http: HttpClient, public navCtrl: NavController, public formBuilder: FormBuilder, private customValidator: CustomValidationService, private platform: Platform) {\n    this.resetForm = formBuilder.group({\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.required])],\n        passwordRepeat: ['', Validators.compose([Validators.maxLength(30), Validators.required])]\n    }, {validator: this.customValidator.passwordMatchValidator('password', 'passwordRepeat')}  );      \n\n  }\n\n  // responsible for printing error messages to the screen based on validator \n  validation_messages = {\n      'password': [\n        { type: 'required', message: 'A password is required.' }\n      ],\n      'passwordRepeat': [\n        { type: 'required', message: 'A password is required.' }\n      ]\n    }\n\n\n  validatePasswordReset(){\n    \n    console.log(this.resetForm.value);\n\n    // Get the unique selector (basically username) and validator (basically encrypted password) for the password reset that was concatenated \n    // with the password reset URL in the link sent to the user's email\n    var selector = this.platform.getQueryParam('selector');\n    var validator = this.platform.getQueryParam('validator');\n\n    console.log(\"Selector: \" + selector);\n    console.log(\"Validator: \" + validator);\n\n    if(!this.resetForm.valid){\n      console.log(\"INVALID\");\n    } else {\n      console.log(\"VALID\");\n\n      // Find a way to get email and password input from user\n      var obj = {func: \"verify_reset\", password: this.resetForm.value['password'], passwordRepeat: this.resetForm.value['passwordRepeat'], \n      selector: selector, validator: validator};\n    \n      this.http.post(\"https://recycle.hpc.tcnj.edu/php/password-resets-handler.php\", JSON.stringify(obj)).subscribe(data => {\n      \n          var result = data as any[];\n\n          if(result['missingInput']){\n            // output to user it succeeded and move to next page\n            console.log(\"missing Input\");\n          } else {\n            // dont move to next page and output error message \"Email or password entered was incorrect\"\n            console.log(\"email sent\");\n          }\n      });\n    }\n  }\n\n\n}\n"]}