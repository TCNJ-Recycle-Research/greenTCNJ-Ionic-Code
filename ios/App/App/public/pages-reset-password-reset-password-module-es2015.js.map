{"version":3,"sources":["./src/app/pages/reset-password/reset-password-routing.module.ts","./src/app/pages/reset-password/reset-password.page.scss","./src/app/pages/reset-password/reset-password.module.ts","./src/app/pages/reset-password/reset-password.page.html","./src/app/pages/reset-password/reset-password.page.ts"],"names":[],"mappings":"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","file":"pages-reset-password-reset-password-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ResetPasswordPageRoutingModule {}\n","export default \".validation-errors {\\n  color: red;\\n  margin: 10px;\\n  font-size: 75%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Jlc2V0LXBhc3N3b3JkLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtBQUNKIiwiZmlsZSI6InJlc2V0LXBhc3N3b3JkLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi52YWxpZGF0aW9uLWVycm9yc3tcbiAgICBjb2xvcjogcmVkOyBcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgZm9udC1zaXplOiA3NSU7XG59Il19 */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';  \n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ResetPasswordPageRoutingModule } from './reset-password-routing.module';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    ReactiveFormsModule,\n    ResetPasswordPageRoutingModule\n  ],\n  declarations: [ResetPasswordPage]\n})\nexport class ResetPasswordPageModule {}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title style=\\\"padding: 0;\\\">\\n        Reset Password\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n <!-- The required elements will not proceed unless they are filled out  -->\\n <form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"validatePasswordReset()\\\" novalidate>\\n   \\n  <!--\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input formControlName=\\\"email\\\" type=\\\"text\\\" required></ion-input>\\n    </ion-item>\\n\\n  -->\\n    \\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"resetForm.get('email').hasError(validation.type) && (resetForm.get('email').dirty || resetForm.get('email').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <!-- type password allows it to appear encrypted and not be visible upon entering -->\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">New Password</ion-label>\\n      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\" required></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"resetForm.get('password').hasError(validation.type) && (resetForm.get('password').dirty || resetForm.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Confirm New Password</ion-label>\\n      <ion-input formControlName=\\\"passwordRepeat\\\" type=\\\"password\\\" required></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"resetForm.get('passwordRepeat').hasError('passwordMismatch')\\\">\\n        Passwords Don't Match\\n        </div>\\n        <div class=\\\"error-message\\\" *ngIf=\\\"resetForm.get('password').hasError(validation.type) && (resetForm.get('password').dirty || resetForm.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-row>\\n      <ion-col>\\n        <ion-button aria-label=\\\"change password\\\" type=\\\"submit\\\" color=\\\"success\\\" expand=\\\"block\\\">Change Password</ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </form>\\n\\n</ion-content>\\n\";","import { Component, OnInit } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { HttpClient} from '@angular/common/http';\nimport { NavController } from '@ionic/angular'; \nimport { FormGroup, FormBuilder, Validators, FormControl } from \"@angular/forms\";\nimport { CustomValidationService } from 'src/app/services/custom-validation.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.page.html',\n  styleUrls: ['./reset-password.page.scss'],\n})\nexport class ResetPasswordPage{\n\n  passwordInput: string = \"\";\n  passwordConfirmInput: string = \"\";\n  resetForm: FormGroup;\n  myControl: FormControl;\n\n  constructor(public http: HttpClient, public navCtrl: NavController, public formBuilder: FormBuilder, private customValidator: CustomValidationService, private platform: Platform) {\n    this.resetForm = formBuilder.group({\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.required])],\n        passwordRepeat: ['', Validators.compose([Validators.maxLength(30), Validators.required])]\n    }, {validator: this.customValidator.passwordMatchValidator('password', 'passwordRepeat')}  );      \n\n  }\n\n  // responsible for printing error messages to the screen based on validator \n  validation_messages = {\n      'password': [\n        { type: 'required', message: 'A password is required.' }\n      ],\n      'passwordRepeat': [\n        { type: 'required', message: 'A password is required.' }\n      ]\n    }\n\n\n  validatePasswordReset(){\n    \n    console.log(this.resetForm.value);\n\n    // Get the unique selector (basically username) and validator (basically encrypted password) for the password reset that was concatenated \n    // with the password reset URL in the link sent to the user's email\n    var selector = this.platform.getQueryParam('selector');\n    var validator = this.platform.getQueryParam('validator');\n\n    console.log(\"Selector: \" + selector);\n    console.log(\"Validator: \" + validator);\n\n    if(!this.resetForm.valid){\n      console.log(\"INVALID\");\n    } else {\n      console.log(\"VALID\");\n\n      // Find a way to get email and password input from user\n      var obj = {func: \"verify_reset\", password: this.resetForm.value['password'], passwordRepeat: this.resetForm.value['passwordRepeat'], \n      selector: selector, validator: validator};\n    \n      this.http.post(\"https://recycle.hpc.tcnj.edu/php/password-resets-handler.php\", JSON.stringify(obj)).subscribe(data => {\n      \n          var result = data as any[];\n\n          if(result['missingInput']){\n            // output to user it succeeded and move to next page\n            console.log(\"missing Input\");\n          } else {\n            // dont move to next page and output error message \"Email or password entered was incorrect\"\n            console.log(\"email sent\");\n          }\n      });\n    }\n  }\n\n\n}\n"],"sourceRoot":"webpack:///"}