{"version":3,"sources":["webpack:///src/app/pages/login/login.module.ts","webpack:///src/app/pages/login/login.page.scss","webpack:///src/app/pages/login/login.page.html","webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/pages/login/login.page.ts"],"names":["LoginPageModule","imports","forRoot","declarations","routes","path","component","LoginPageRoutingModule","forChild","exports","LoginPage","storage","menuCtrl","alertController","authService","router","http","navCtrl","formBuilder","loadingController","emailInput","passwordInput","invalidLogin","pageLoaded","wrongInput","correctInput","missingInput","unverifiedExists","canLogin","validation_messages","type","message","loginForm","group","email","compose","maxLength","pattern","required","password","enable","valid","console","log","obj","func","value","post","JSON","stringify","subscribe","data","result","set","create","loading","present","login","res","dismiss","header","buttons","alert","loginSuccess","missingValues","wrongCredientals","navigateToHomePage","unverifiedAccount","navigate","replaceUrl","navigateByUrl","then","success","formInput","controls","hasError","selector","template"],"mappings":"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","file":"pages-login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\nimport { IonicStorageModule } from '@ionic/storage';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    IonicStorageModule.forRoot(),\n    ReactiveFormsModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \".validation-errors {\\n  color: red;\\n  margin: 10px;\\n  font-size: 75%;\\n}\\n\\nimg.center {\\n  height: 25vh;\\n  width: auto;\\n  display: block;\\n  margin: 0 auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xvZ2luLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFVBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtBQUNKOztBQUVBO0VBQ0ksWUFBQTtFQUNBLFdBQUE7RUFDQSxjQUFBO0VBQ0EsY0FBQTtBQUNKIiwiZmlsZSI6ImxvZ2luLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi52YWxpZGF0aW9uLWVycm9yc3tcbiAgICBjb2xvcjogcmVkOyBcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgZm9udC1zaXplOiA3NSU7XG59XG5cbmltZy5jZW50ZXIge1xuICAgIGhlaWdodDogMjV2aDtcbiAgICB3aWR0aDogYXV0bztcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IDAgYXV0bztcbn1cbiJdfQ== */\";","export default \"<!-- This page is responsible for the login page -->\\n<ion-header>\\n  <ion-toolbar mode=\\\"ios\\\">\\n    <ion-title >\\n      Log In\\n    </ion-title>\\n    <!-- has a back button to be able to go back to the start page in the event that they need to register rather than sign up -->\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/start\\\"></ion-back-button>\\n    </ion-buttons>\\n    \\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n<!-- This is added to space out the image so it is in the center of the screen -->\\n<ion-grid>\\n  <ion-row>\\n      <ion-col>\\n        <!-- <ion-img [src]=\\\"assets/logo\\\" alt=\\\"logo-image\\\"></ion-img> -->\\n        <img alt=\\\"\\\" class=\\\"center\\\" src=\\\"../../assets/icon/icon.png\\\" vertical-align=\\\"middle\\\">\\n      </ion-col>\\n </ion-row>\\n</ion-grid>\\n\\n  <!-- The required elements will not proceed unless they are filled out  -->\\n  <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Email\\n        <span *ngIf=\\\"formInputIsRequired('email')\\\" class=\\\"required\\\">&#42;</span>\\n      </ion-label>\\n      <ion-input formControlName=\\\"email\\\" type=\\\"text\\\" required></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <!-- type password allows it to appear encrypted and not be visible upon entering -->\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Password</ion-label>\\n      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\" required></ion-input>\\n    </ion-item>\\n\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-row>\\n      <ion-col>\\n        <div class=\\\"validation-errors\\\">\\n          <span *ngIf=\\\"loginFailure()\\\">Email or password entered was incorrect</span>        \\n        </div>\\n        <ion-button aria-label=\\\"Login\\\" type=\\\"submit\\\" color=\\\"success\\\" expand=\\\"block\\\" (click)=\\\"checkValidLogin()\\\">Login</ion-button>\\n      </ion-col>\\n    </ion-row>\\n\\n    <ion-item lines=\\\"none\\\" class=\\\"ion-no-padding\\\">\\n      <a style=\\\"margin: 0 auto; padding: 0 auto;\\\" [routerLink]=\\\"['/recover-password']\\\" class=\\\"small-text\\\">Forgot Password?</a>\\n    </ion-item>\\n\\n  </form>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { NavController } from '@ionic/angular'; \nimport { FormGroup, FormBuilder, Validators, FormControl } from \"@angular/forms\";\nimport { Router, NavigationExtras } from '@angular/router';\nimport { AlertController, LoadingController } from '@ionic/angular';\nimport { AuthenticationService } from './../../services/authentication.service';\nimport {  MenuController } from '@ionic/angular';\n\nimport { Storage } from '@ionic/storage';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\n\nexport class LoginPage {\n  \n  // form input \n  emailInput: string = \"\";\n  passwordInput: string = \"\";\n  \n  // form variables\n  loginForm: FormGroup;\n  myControl: FormControl;\n\n  // boolean values for login checks \n  invalidLogin: boolean = false;\n  pageLoaded: boolean = false;\n  wrongInput: boolean = false;\n  correctInput: boolean = false;\n  missingInput: boolean = false;\n  unverifiedExists : boolean = false;\n  canLogin: boolean = false;\n\n  constructor(private storage: Storage, public menuCtrl: MenuController, private alertController: AlertController, private authService: AuthenticationService, private router: Router, public http: HttpClient, public navCtrl: NavController, public formBuilder: FormBuilder, private loadingController: LoadingController) {\n    this.loginForm = formBuilder.group({\n        // Require validators for the input fields so we can quickly tell them if their input is valid, the patten string is what characters\n        // are allowed in the field and for email it makes sure there is a @ character and a domain field like .com\n        email: ['', Validators.compose([Validators.maxLength(30), Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\"), Validators.required])],\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.required])]\n    });\n    this.menuCtrl.enable(false);\n  }\n\n  \n\n  // responsible for printing error messages to the screen based on validator \n  validation_messages = {\n    'email': [\n        { type: 'maxlength', message: 'Your email cannot be more than 30 characters long.' },\n        { type: 'pattern', message: 'You must enter a valid email.' }\n      ],\n      'password': [\n        { type: 'required', message: 'A password is required.' }\n      ]\n  }\n\n\ncheckValidLogin(){\n\n  if(!this.loginForm.valid){\n    console.log(\"INVALID\");\n  }else{\n    console.log(\"VALID\");\n\n          // Find a way to get email and password input from user\n          var obj = {func: \"try_login\", email: this.loginForm.value['email'], password: this.loginForm.value['password']};\n          \n          this.http.post(\"https://recycle.hpc.tcnj.edu/php/users-handler.php\", JSON.stringify(obj)).subscribe(data => {\n                \n            var result = data as any[];\n    \n              if(result[\"loginSuccess\"]){\n                this.invalidLogin = false;\n    \n                // this is used to store user info within the app, stores userID, Name, type, and email \n                this.storage.set('userID', result['userInfo']['userID']); \n                this.storage.set('userName', result['userInfo']['userFirstName']);\n                this.storage.set('userType', result['userInfo']['userType']);\n                this.storage.set('userEmail', result[\"userInfo\"][\"userEmail\"]);\n    \n                // used to set user interests within the app\n                this.storage.set('userRecyclingInterest', result[\"userInfo\"][\"recyclingInterest\"]);\n                this.storage.set('userWaterInterest', result[\"userInfo\"][\"waterInterest\"]);\n                this.storage.set('userPollutionInterest', result[\"userInfo\"][\"pollutionInterest\"]);\n                this.storage.set('userEnergyInterest', result[\"userInfo\"][\"energyInterest\"]);\n    \n                this.invalidLogin = false;\n                this.correctInput = true;\n                this.missingInput = false;\n                this.unverifiedExists = false;\n                this.wrongInput = false;\n\n                \n              }else if(result[\"missingInputs\"]){\n                // output error message of missing inputs\n                console.log(\"Missing Input\");\n\n                this.invalidLogin = true;\n                this.correctInput = false;\n                this.missingInput = true;\n                this.wrongInput = false;\n                this.unverifiedExists = false;\n                    \n              }else if(result[\"unverifiedExists\"]){\n                // output error message of the account is unverified\n                console.log(\"Account is unverified\");\n\n                this.invalidLogin = true;\n                this.correctInput = false;\n                this.missingInput = false;\n                this.unverifiedExists = true;\n                this.wrongInput = false;\n                    \n              }else{\n                // dont move to next page and output error message \"Email or password entered was incorrect\"\n                console.log(\"Email or password was incorrect\");\n \n                this.invalidLogin = true;\n                this.correctInput = false;\n                this.missingInput = false;\n                this.wrongInput = true;\n                this.unverifiedExists = false;\n      \n              }\n          });\n\n          \n    }\n  this.canLogin  = true;\n  }\n\n  //\n  async login(){\n\n    const loading = await this.loadingController.create();\n    await loading.present();\n    \n    if(!this.loginForm.valid && this.canLogin){\n      console.log(\"INVALID\");\n\n      this.authService.login(this.loginForm.value).subscribe(\n        async (res) => {\n          await loading.dismiss();\n          const alert = await this.alertController.create({\n            header: 'Login failed',\n            message: 'Please enter valid fields.',\n            buttons: ['OK'],\n          });\n          await alert.present();\n        }\n      );\n    }else{\n      console.log(\"VALID\");\n\n      // valid login\n      if(this.loginSuccess() && !this.missingValues() && !this.wrongCredientals() ){\n\n        this.authService.login(this.loginForm.value).subscribe(\n          async (res) => {\n            \n            loading.dismiss();\n            this.invalidLogin = false;\n            this.navigateToHomePage();\n          }\n        );\n\n        this.correctInput = true;\n        this.missingInput = false;\n        this.wrongInput = false;\n\n      // missing input  \n      }else if(!this.loginSuccess() && this.missingValues() && !this.wrongCredientals()){\n\n        console.log(\"Missing Input\");\n        \n        this.authService.login(this.loginForm.value).subscribe(\n          async (res) => {\n            await loading.dismiss();\n            const alert = await this.alertController.create({\n              header: 'Login failed',\n              message: 'You are missing input.',\n              buttons: ['OK'],\n            });\n            await alert.present();\n          }\n        );\n\n        this.correctInput = false;\n        this.missingInput = true;\n        this.wrongInput = false;\n\n      // wrong credentials \n      }else if(!this.loginSuccess() && !this.missingValues() && !this.wrongCredientals() && this.unverifiedAccount()){\n\n        console.log(\"Account is unverified\");\n        \n        this.authService.login(this.loginForm.value).subscribe(\n          async (res) => {\n            await loading.dismiss();\n            const alert = await this.alertController.create({\n              header: 'Login failed',\n              message: 'You cannot log in until your account is verified.',\n              buttons: ['OK'],\n            });\n            await alert.present();\n          }\n        );\n\n        this.correctInput = false;\n        this.missingInput = true;\n        this.wrongInput = false;\n        this.unverifiedExists = true;\n\n\n      // wrong credentials \n      }else if(!this.loginSuccess() && !this.missingValues() && this.wrongCredientals()){\n        \n        console.log(\"Email or password was incorrect\");\n\n        this.authService.login(this.loginForm.value).subscribe(\n          async (res) => {\n            await loading.dismiss();\n            const alert = await this.alertController.create({\n              header: 'Login failed',\n              message: 'Your email or password was incorrect',\n              buttons: ['OK'],\n            });\n            await alert.present();\n          }\n        );\n\n        this.correctInput = false;\n        this.missingInput = false;\n        this.wrongInput = true;\n\n      // should never resch here   \n      }else{\n        loading.dismiss();\n      }\n\n    }\n     \n  }\n\n  // function to route to the home page after logging in \n  navigateToHomePage() {\n    this.pageLoaded = true;\n    this.menuCtrl.enable(true);\n    this.router.navigate(['/home'], { replaceUrl: true });\n    this.router.navigateByUrl('/home').then(success => console.log(`routing status: ${success}`));\n  }\n\n\n  // used to add * to email and it is removed once something is entered\n  formInputIsRequired(formInput: string) {\n    if (this.loginForm.controls[formInput]) {\n      if (this.loginForm.controls[formInput].hasError('required')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // boolean return values\n  loginFailure(){\n\n    return this.invalidLogin;\n\n  }\n\n  wrongCredientals(){\n\n    return this.wrongInput;\n\n  }\n\n  loginSuccess(){\n\n    return this.correctInput;\n\n  }\n\n  missingValues(){\n\n    return this.missingInput;\n\n  }\n\n  unverifiedAccount(){\n\n    return this.unverifiedExists;\n  }\n\n}\n"]}