{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ionic/angular\";\nfunction RecoverPasswordPage_ng_container_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const validation_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", validation_r2.message, \" \");\n  }\n}\nfunction RecoverPasswordPage_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RecoverPasswordPage_ng_container_13_div_1_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const validation_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.emailForm.get(\"email\").hasError(validation_r2.type) && (ctx_r0.emailForm.get(\"email\").dirty || ctx_r0.emailForm.get(\"email\").touched));\n  }\n}\nfunction RecoverPasswordPage_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"If an account with that email exists a password reset link has been sent.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let RecoverPasswordPage = /*#__PURE__*/(() => {\n  class RecoverPasswordPage {\n    // firstName: new FormControl()\n    constructor(router, http, formBuilder) {\n      this.router = router;\n      this.http = http;\n      this.formBuilder = formBuilder;\n      this.emailInput = \"\";\n      this.emailSent = false;\n      // responsible for printing error messages to the screen based on validator \n      this.validation_messages = {\n        'email': [{\n          type: 'maxlength',\n          message: 'Your email cannot be more than 30 characters long.'\n        }, {\n          type: 'pattern',\n          message: 'You must enter a valid email.'\n        }]\n      };\n      this.emailForm = formBuilder.group({\n        // Require validators for the input fields so we can quickly tell them if their input is valid, the patten string is what characters\n        // are allowed in the field and for email it makes sure there is a @ character and a domain field like .com\n        email: ['', Validators.compose([Validators.maxLength(30), Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\"), Validators.required])]\n      });\n    }\n    // If an account with that email exists and password reset link will be sent\n    // generate_password_reset\n    checkEmail() {\n      console.log(\"try signup\");\n      console.log(this.emailForm.value);\n      if (!this.emailForm.valid) {\n        console.log(\"INVALID\");\n      } else {\n        console.log(\"VALID\");\n        // Find a way to get email and password input from user\n        var obj = {\n          func: \"generate_reset\",\n          email: this.emailForm.value['email'],\n          isMobileRequest: true\n        };\n        this.http.post(\"https://recycle.hpc.tcnj.edu/php/password-resets-handler.php\", JSON.stringify(obj)).subscribe(data => {\n          //not getting result\n          var result = data;\n          if (result['missingInput']) {\n            console.log(\"missing Input\");\n            this.emailSent = false;\n          } else {\n            // output to user it succeeded and move to next page\n            this.emailSent = true;\n            console.log(\"email sent\");\n            this.emailForm.reset();\n          }\n        });\n      }\n    }\n    emailFailure() {\n      return this.emailSent;\n    }\n  }\n  RecoverPasswordPage.ɵfac = function RecoverPasswordPage_Factory(t) {\n    return new (t || RecoverPasswordPage)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder));\n  };\n  RecoverPasswordPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RecoverPasswordPage,\n    selectors: [[\"app-recover-password\"]],\n    decls: 24,\n    vars: 3,\n    consts: [[\"slot\", \"start\"], [2, \"padding\", \"0\"], [3, \"formGroup\", \"ngSubmit\"], [\"lines\", \"full\"], [\"position\", \"floating\"], [\"formControlName\", \"email\", \"type\", \"text\", \"required\", \"\"], [1, \"validation-errors\"], [4, \"ngFor\", \"ngForOf\"], [\"aria-label\", \"Send\", \"type\", \"submit\", \"color\", \"success\", \"expand\", \"block\"], [1, \"validation-confirmation\"], [4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"]],\n    template: function RecoverPasswordPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n        i0.ɵɵelement(3, \"ion-back-button\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 1);\n        i0.ɵɵtext(5, \"Reset Your Password\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\")(7, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function RecoverPasswordPage_Template_form_ngSubmit_7_listener() {\n          return ctx.checkEmail();\n        });\n        i0.ɵɵelementStart(8, \"ion-item\", 3)(9, \"ion-label\", 4);\n        i0.ɵɵtext(10, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"ion-input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵtemplate(13, RecoverPasswordPage_ng_container_13_Template, 2, 1, \"ng-container\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-row\")(15, \"ion-col\")(16, \"ion-button\", 8);\n        i0.ɵɵtext(17, \"Send\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 9);\n        i0.ɵɵtemplate(19, RecoverPasswordPage_span_19_Template, 2, 0, \"span\", 10);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(20, \"ion-row\")(21, \"ion-col\")(22, \"small\");\n        i0.ɵɵtext(23, \" *Please provide your account's email. \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.emailForm);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.validation_messages.email);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFailure());\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i5.IonBackButton, i5.IonButton, i5.IonButtons, i5.IonCol, i5.IonContent, i5.IonHeader, i5.IonInput, i5.IonItem, i5.IonLabel, i5.IonRow, i5.IonTitle, i5.IonToolbar, i5.TextValueAccessor, i5.IonBackButtonDelegate, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".validation-errors[_ngcontent-%COMP%]{color:red;margin:10px;font-size:75%}.validation-confirmation[_ngcontent-%COMP%]{color:green;margin:10px;font-size:75%}\"]\n  });\n  return RecoverPasswordPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}