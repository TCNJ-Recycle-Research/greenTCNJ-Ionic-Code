{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BarcodeScanner, SupportedFormat } from '@capacitor-community/barcode-scanner';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/storage\";\n//import { stat } from 'fs';\nexport let QrScannerPage = /*#__PURE__*/(() => {\n  class QrScannerPage {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage;\n      this.scanActive = false;\n      storage.get('userID').then(val => {\n        this.usrID = val;\n      });\n      //this.scanBarcode();\n    }\n\n    prepare() {\n      BarcodeScanner.prepare();\n    }\n    destroy() {\n      BarcodeScanner.stopScan();\n      this.scanActive = false;\n    }\n    grantPerms() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const status = yield BarcodeScanner.checkPermission({\n          force: false\n        });\n        if (status.granted) {\n          //granted permission to use camera\n          return true;\n        }\n        if (status.denied) {\n          // the user denied permission for good\n          // redirect user to app settings if they want to grant it anyway\n          const c = confirm('If you want to grant permission for using your camera, enable it in the app settings.');\n          if (c) {\n            BarcodeScanner.openAppSettings();\n          }\n        }\n        if (status.neverAsked) {\n          // user has not been requested this permission before\n          // it is advised to show the user some sort of prompt\n          // this way you will not waste your only chance to ask for the permission\n          const c = confirm('We need your permission to use your camera to be able to scan barcodes');\n          if (!c) {\n            return false;\n          }\n        }\n        if (status.restricted || status.unknown) {\n          // ios only\n          // probably means the permission has been denied\n          return false;\n        }\n        // user has not denied permission\n        // but the user also has not yet granted the permission\n        // so request it\n        const statusRequest = yield BarcodeScanner.checkPermission({\n          force: true\n        });\n        if (statusRequest.granted) {\n          // the user did grant the permission now\n          return true;\n        }\n        // user did not grant the permission, so he must have declined the request\n        return false;\n      });\n    }\n    scanBarcode() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.grantPerms()) {\n          this.scanActive = true;\n          const result = yield BarcodeScanner.startScan({\n            targetedFormats: [SupportedFormat.QR_CODE]\n          });\n          if (result.hasContent) {\n            var obj = {\n              func: \"add_participant\",\n              eventID: result.content,\n              userID: this.usrID,\n              attendance: 1\n            };\n            this.http.post(\"https://recycle.hpc.tcnj.edu/php/participants-handler.php\", JSON.stringify(obj)).subscribe(data => {\n              var response = data;\n            });\n            if (confirm(\"Your code was read successfully! Did you want to scan again?\")) {\n              this.scanBarcode();\n            } else {\n              this.scanActive = false;\n            }\n          } else {\n            console.log(\"Nothing read from QR Code\");\n            if (confirm(\"Sorry, nothing was read from that code! Try again?\")) {\n              this.scanBarcode();\n            } else {\n              this.scanActive = false;\n            }\n          }\n        } else {\n          const c = confirm('If you want to grant permission for using your camera, enable it in the app settings.');\n          if (c) {\n            BarcodeScanner.openAppSettings();\n          }\n        }\n      });\n    }\n  }\n  QrScannerPage.ɵfac = function QrScannerPage_Factory(t) {\n    return new (t || QrScannerPage)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Storage));\n  };\n  QrScannerPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QrScannerPage,\n    selectors: [[\"app-qr-scanner\"]],\n    decls: 26,\n    vars: 6,\n    consts: [[3, \"hidden\"], [\"mode\", \"ios\"], [\"slot\", \"start\"], [\"menu\", \"main-menu\"], [1, \"ion-text-wrap\"], [\"alt\", \"\", \"src\", \"../../assets/icon/qrscan.png\", \"vertical-align\", \"middle\", 1, \"center\"], [1, \"scanner-buttons\"], [1, \"ion-no-padding\"], [\"expand\", \"full\", 3, \"click\"], [\"name\", \"scan\", \"slot\", \"start\"], [1, \"scanner-buttons\", 3, \"hidden\"], [1, \"scan-box\", 3, \"hidden\"]],\n    template: function QrScannerPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\", 1)(2, \"ion-buttons\", 2);\n        i0.ɵɵelement(3, \"ion-menu-button\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\")(5, \"div\", 4);\n        i0.ɵɵtext(6, \" Attendance Scanner \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(7, \"ion-content\")(8, \"class\", 0)(9, \"ion-item\")(10, \"p\");\n        i0.ɵɵtext(11, \" Here you can use your phone's camera to scan a GreenTCNJ QR code provided by an event organizer to let them know you attended. Make sure you give the app permissions to use your camera! \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"ion-grid\")(13, \"ion-row\")(14, \"ion-col\");\n        i0.ɵɵelement(15, \"img\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"ion-row\", 6)(17, \"ion-col\", 7)(18, \"ion-button\", 8);\n        i0.ɵɵlistener(\"click\", function QrScannerPage_Template_ion_button_click_18_listener() {\n          return ctx.scanBarcode();\n        });\n        i0.ɵɵelement(19, \"ion-icon\", 9);\n        i0.ɵɵtext(20, \" Start Scan \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(21, \"ion-row\", 10)(22, \"ion-col\", 7)(23, \"ion-button\", 8);\n        i0.ɵɵlistener(\"click\", function QrScannerPage_Template_ion_button_click_23_listener() {\n          return ctx.destroy();\n        });\n        i0.ɵɵtext(24, \" Stop \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(25, \"div\", 11);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hidden\", ctx.scanActive);\n        i0.ɵɵadvance(7);\n        i0.ɵɵstyleProp(\"--background\", ctx.scanActive ? \"#00000000\" : \"#fff\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.scanActive);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"hidden\", !ctx.scanActive);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"hidden\", !ctx.scanActive);\n      }\n    },\n    styles: [\"@charset \\\"UTF-8\\\";.scanner-buttons[_ngcontent-%COMP%]{margin:0;position:absolute;bottom:100px;width:100vw;height:50px;z-index:11}.scan-box[_ngcontent-%COMP%]{border:2 px solid #fff;box-shadow:0 0 0 100vmax #00000080;content:\\\\2018\\\\2019;display:block;left:50%;height:300px;position:absolute;top:50%;transform:translate(-50%,-50%);width:300px}\"]\n  });\n  return QrScannerPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}