{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject, from, Observable } from 'rxjs';\nimport { App } from '@capacitor/app';\nimport { removeAllListeners } from 'process';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@ionic/storage\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(modalCtrl, http, storage) {\n      this.modalCtrl = modalCtrl;\n      this.http = http;\n      this.storage = storage;\n      // Init with null to filter out the first value in a guard!\n      this.isAuthenticated = new BehaviorSubject(null);\n      App.addListener('backButton', ({\n        canGoBack\n      }) => {\n        if (this.modalCtrl.dismiss()) {} else if (!canGoBack) {\n          App.exitApp();\n        } else {\n          window.history.back();\n        }\n      });\n      this.loadToken();\n    }\n    loadToken() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const storedToken = yield this.storage.get('token');\n        if (storedToken) {\n          this.validateToken(storedToken).then(data => {\n            var result = data;\n            if (result[\"loginSuccess\"]) {\n              console.log(\"TOKEN VALID\");\n              this.storage.set('token', result[\"token\"]);\n              this.updateStorage(result[\"userInfo\"][0]);\n              this.isAuthenticated.next(true);\n            } else {\n              console.log(\"TOKEN INVALID\");\n              this.isAuthenticated.next(false);\n            }\n          });\n        } else {\n          console.log(\"NO TOKEN\");\n          this.isAuthenticated.next(false);\n        }\n      });\n    }\n    validateToken(token) {\n      var obj = {\n        func: \"jwt_login\",\n        token: token\n      };\n      return this.http.post(\"https://recycle.hpc.tcnj.edu/php/users-handler.php\", JSON.stringify(obj)).toPromise().then(data => data).catch(msg => console.log('Token Validation Error: ' + msg.status + ' ' + msg.statusText));\n    }\n    updateStorage(userData) {\n      // this is used to store user info within the app, stores userID, Name, type, and email \n      this.storage.set('userID', userData['userID']);\n      this.storage.set('userName', userData['userFirstName']);\n      this.storage.set('userType', userData['userType']);\n      this.storage.set('userEmail', userData[\"userEmail\"]);\n      // used to set user interests within the app\n      this.storage.set('userRecyclingInterest', userData[\"recyclingInterest\"]);\n      this.storage.set('userWaterInterest', userData[\"waterInterest\"]);\n      this.storage.set('userPollutionInterest', userData[\"pollutionInterest\"]);\n      this.storage.set('userEnergyInterest', userData[\"energyInterest\"]);\n    }\n    login(credentials) {\n      var obj = {\n        func: \"try_login\",\n        email: credentials.email,\n        password: credentials.password\n      };\n      return this.http.post(\"https://recycle.hpc.tcnj.edu/php/users-handler.php\", JSON.stringify(obj)).pipe(map(data => data), switchMap(data => {\n        return from(this.storage.set('token', data[\"token\"]));\n      }), tap(_ => {\n        this.isAuthenticated.next(true);\n      }));\n    }\n    logout() {\n      this.isAuthenticated.next(false);\n      removeAllListeners();\n      return this.storage.remove('token');\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.ModalController), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Storage));\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}