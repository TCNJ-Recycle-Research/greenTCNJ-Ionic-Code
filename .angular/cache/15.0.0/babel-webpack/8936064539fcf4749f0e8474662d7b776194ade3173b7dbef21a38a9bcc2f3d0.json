{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from \"@angular/forms\";\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"./../../services/authentication.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common/http\";\nimport * as i6 from \"@angular/forms\";\nfunction LoginPage_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \"*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginPage_ng_container_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const validation_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", validation_r4.message, \" \");\n  }\n}\nfunction LoginPage_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, LoginPage_ng_container_18_div_1_Template, 2, 1, \"div\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const validation_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.get(\"email\").hasError(validation_r4.type) && (ctx_r1.loginForm.get(\"email\").dirty || ctx_r1.loginForm.get(\"email\").touched));\n  }\n}\nfunction LoginPage_ng_container_24_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const validation_r7 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", validation_r7.message, \" \");\n  }\n}\nfunction LoginPage_ng_container_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, LoginPage_ng_container_24_div_1_Template, 2, 1, \"div\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const validation_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loginForm.get(\"password\").hasError(validation_r7.type) && (ctx_r2.loginForm.get(\"password\").dirty || ctx_r2.loginForm.get(\"password\").touched));\n  }\n}\nfunction LoginPage_span_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Email or password entered was incorrect\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"/recover-password\"];\n};\nexport let LoginPage = /*#__PURE__*/(() => {\n  class LoginPage {\n    constructor(storage, menuCtrl, alertController, authService, router, http, navCtrl, formBuilder, loadingController) {\n      this.storage = storage;\n      this.menuCtrl = menuCtrl;\n      this.alertController = alertController;\n      this.authService = authService;\n      this.router = router;\n      this.http = http;\n      this.navCtrl = navCtrl;\n      this.formBuilder = formBuilder;\n      this.loadingController = loadingController;\n      // form input \n      this.emailInput = \"\";\n      this.passwordInput = \"\";\n      // boolean values for login checks \n      this.invalidLogin = false;\n      this.pageLoaded = false;\n      this.wrongInput = false;\n      this.correctInput = false;\n      this.missingInput = false;\n      this.unverifiedExists = false;\n      this.canLogin = false;\n      // responsible for printing error messages to the screen based on validator \n      this.validation_messages = {\n        'email': [{\n          type: 'maxlength',\n          message: 'Your email cannot be more than 30 characters long.'\n        }, {\n          type: 'pattern',\n          message: 'You must enter a valid email.'\n        }],\n        'password': [{\n          type: 'required',\n          message: 'A password is required.'\n        }]\n      };\n      this.loginForm = formBuilder.group({\n        // Require validators for the input fields so we can quickly tell them if their input is valid, the patten string is what characters\n        // are allowed in the field and for email it makes sure there is a @ character and a domain field like .com\n        email: ['', Validators.compose([Validators.maxLength(30), Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\"), Validators.required])],\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.required])]\n      });\n      this.menuCtrl.enable(false);\n    }\n    checkValidLogin() {\n      if (!this.loginForm.valid) {\n        console.log(\"INVALID\");\n      } else {\n        console.log(\"VALID\");\n        // Find a way to get email and password input from user\n        var obj = {\n          func: \"try_login\",\n          email: this.loginForm.value['email'],\n          password: this.loginForm.value['password']\n        };\n        this.http.post(\"https://recycle.hpc.tcnj.edu/php/users-handler.php\", JSON.stringify(obj)).subscribe(data => {\n          var result = data;\n          if (result[\"loginSuccess\"]) {\n            this.invalidLogin = false;\n            // this is used to store user info within the app, stores userID, Name, type, and email \n            this.storage.set('userID', result['userInfo']['userID']);\n            this.storage.set('userName', result['userInfo']['userFirstName']);\n            this.storage.set('userType', result['userInfo']['userType']);\n            this.storage.set('userEmail', result[\"userInfo\"][\"userEmail\"]);\n            // used to set user interests within the app\n            this.storage.set('userRecyclingInterest', result[\"userInfo\"][\"recyclingInterest\"]);\n            this.storage.set('userWaterInterest', result[\"userInfo\"][\"waterInterest\"]);\n            this.storage.set('userPollutionInterest', result[\"userInfo\"][\"pollutionInterest\"]);\n            this.storage.set('userEnergyInterest', result[\"userInfo\"][\"energyInterest\"]);\n            this.invalidLogin = false;\n            this.correctInput = true;\n            this.missingInput = false;\n            this.unverifiedExists = false;\n            this.wrongInput = false;\n          } else if (result[\"missingInputs\"]) {\n            // output error message of missing inputs\n            console.log(\"Missing Input\");\n            this.invalidLogin = true;\n            this.correctInput = false;\n            this.missingInput = true;\n            this.wrongInput = false;\n            this.unverifiedExists = false;\n          } else if (result[\"unverifiedExists\"]) {\n            // output error message of the account is unverified\n            console.log(\"Account is unverified\");\n            this.invalidLogin = true;\n            this.correctInput = false;\n            this.missingInput = false;\n            this.unverifiedExists = true;\n            this.wrongInput = false;\n          } else {\n            // dont move to next page and output error message \"Email or password entered was incorrect\"\n            console.log(\"Email or password was incorrect\");\n            this.invalidLogin = true;\n            this.correctInput = false;\n            this.missingInput = false;\n            this.wrongInput = true;\n            this.unverifiedExists = false;\n          }\n        });\n      }\n      this.canLogin = true;\n    }\n    //\n    login() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loading = yield this.loadingController.create();\n        yield loading.present();\n        if (!this.loginForm.valid && this.canLogin) {\n          console.log(\"INVALID\");\n          this.authService.login(this.loginForm.value).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n            yield loading.dismiss();\n            const alert = yield this.alertController.create({\n              header: 'Login failed',\n              message: 'Please enter valid fields.',\n              buttons: ['OK']\n            });\n            yield alert.present();\n          }));\n        } else {\n          console.log(\"VALID\");\n          // valid login\n          if (this.loginSuccess() && !this.missingValues() && !this.wrongCredientals()) {\n            this.authService.login(this.loginForm.value).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n              loading.dismiss();\n              this.invalidLogin = false;\n              this.navigateToHomePage();\n            }));\n            this.correctInput = true;\n            this.missingInput = false;\n            this.wrongInput = false;\n            // missing input  \n          } else if (!this.loginSuccess() && this.missingValues() && !this.wrongCredientals()) {\n            console.log(\"Missing Input\");\n            this.authService.login(this.loginForm.value).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n              yield loading.dismiss();\n              const alert = yield this.alertController.create({\n                header: 'Login failed',\n                message: 'You are missing input.',\n                buttons: ['OK']\n              });\n              yield alert.present();\n            }));\n            this.correctInput = false;\n            this.missingInput = true;\n            this.wrongInput = false;\n            // wrong credentials \n          } else if (!this.loginSuccess() && !this.missingValues() && !this.wrongCredientals() && this.unverifiedAccount()) {\n            console.log(\"Account is unverified\");\n            this.authService.login(this.loginForm.value).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n              yield loading.dismiss();\n              const alert = yield this.alertController.create({\n                header: 'Login failed',\n                message: 'You cannot log in until your account is verified.',\n                buttons: ['OK']\n              });\n              yield alert.present();\n            }));\n            this.correctInput = false;\n            this.missingInput = true;\n            this.wrongInput = false;\n            this.unverifiedExists = true;\n            // wrong credentials \n          } else if (!this.loginSuccess() && !this.missingValues() && this.wrongCredientals()) {\n            console.log(\"Email or password was incorrect\");\n            this.authService.login(this.loginForm.value).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n              yield loading.dismiss();\n              const alert = yield this.alertController.create({\n                header: 'Login failed',\n                message: 'Your email or password was incorrect',\n                buttons: ['OK']\n              });\n              yield alert.present();\n            }));\n            this.correctInput = false;\n            this.missingInput = false;\n            this.wrongInput = true;\n            // should never resch here   \n          } else {\n            loading.dismiss();\n          }\n        }\n      });\n    }\n    // function to route to the home page after logging in \n    navigateToHomePage() {\n      this.pageLoaded = true;\n      this.menuCtrl.enable(true);\n      this.router.navigate(['/home'], {\n        replaceUrl: true\n      });\n      this.router.navigateByUrl('/home').then(success => console.log(`routing status: ${success}`));\n    }\n    // used to add * to email and it is removed once something is entered\n    formInputIsRequired(formInput) {\n      if (this.loginForm.controls[formInput]) {\n        if (this.loginForm.controls[formInput].hasError('required')) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // boolean return values\n    loginFailure() {\n      return this.invalidLogin;\n    }\n    wrongCredientals() {\n      return this.wrongInput;\n    }\n    loginSuccess() {\n      return this.correctInput;\n    }\n    missingValues() {\n      return this.missingInput;\n    }\n    unverifiedAccount() {\n      return this.unverifiedExists;\n    }\n  }\n  LoginPage.ɵfac = function LoginPage_Factory(t) {\n    return new (t || LoginPage)(i0.ɵɵdirectiveInject(i1.Storage), i0.ɵɵdirectiveInject(i2.MenuController), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.HttpClient), i0.ɵɵdirectiveInject(i2.NavController), i0.ɵɵdirectiveInject(i6.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.LoadingController));\n  };\n  LoginPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginPage,\n    selectors: [[\"app-login\"]],\n    decls: 34,\n    vars: 7,\n    consts: [[\"mode\", \"ios\"], [\"slot\", \"start\"], [\"defaultHref\", \"/start\"], [\"alt\", \"\", \"src\", \"../../assets/icon/icon.png\", \"vertical-align\", \"middle\", 1, \"center\"], [3, \"formGroup\", \"ngSubmit\"], [\"lines\", \"full\"], [\"position\", \"floating\"], [\"class\", \"required\", 4, \"ngIf\"], [\"formControlName\", \"email\", \"type\", \"text\", \"required\", \"\"], [1, \"validation-errors\"], [4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"password\", \"type\", \"password\", \"required\", \"\"], [4, \"ngIf\"], [\"aria-label\", \"Login\", \"type\", \"submit\", \"color\", \"success\", \"expand\", \"block\", 3, \"click\"], [\"lines\", \"none\", 1, \"ion-no-padding\"], [1, \"small-text\", 2, \"margin\", \"0 auto\", \"padding\", \"0 auto\", 3, \"routerLink\"], [1, \"required\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"]],\n    template: function LoginPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-title\");\n        i0.ɵɵtext(3, \" Log In \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-buttons\", 1);\n        i0.ɵɵelement(5, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\")(7, \"ion-grid\")(8, \"ion-row\")(9, \"ion-col\");\n        i0.ɵɵelement(10, \"img\", 3);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginPage_Template_form_ngSubmit_11_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(12, \"ion-item\", 5)(13, \"ion-label\", 6);\n        i0.ɵɵtext(14, \"Email \");\n        i0.ɵɵtemplate(15, LoginPage_span_15_Template, 2, 0, \"span\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"ion-input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 9);\n        i0.ɵɵtemplate(18, LoginPage_ng_container_18_Template, 2, 1, \"ng-container\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"ion-item\", 5)(20, \"ion-label\", 6);\n        i0.ɵɵtext(21, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"ion-input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 9);\n        i0.ɵɵtemplate(24, LoginPage_ng_container_24_Template, 2, 1, \"ng-container\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"ion-row\")(26, \"ion-col\")(27, \"div\", 9);\n        i0.ɵɵtemplate(28, LoginPage_span_28_Template, 2, 0, \"span\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"ion-button\", 13);\n        i0.ɵɵlistener(\"click\", function LoginPage_Template_ion_button_click_29_listener() {\n          return ctx.checkValidLogin();\n        });\n        i0.ɵɵtext(30, \"Login\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(31, \"ion-item\", 14)(32, \"a\", 15);\n        i0.ɵɵtext(33, \"Forgot Password?\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.formInputIsRequired(\"email\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.validation_messages.email);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.validation_messages.password);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginFailure());\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(6, _c0));\n      }\n    },\n    styles: [\".validation-errors[_ngcontent-%COMP%]{color:red;margin:10px;font-size:75%}img.center[_ngcontent-%COMP%]{height:25vh;width:auto;display:block;margin:0 auto}\"]\n  });\n  return LoginPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}