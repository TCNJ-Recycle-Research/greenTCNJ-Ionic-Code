{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"src/app/services/custom-validation.service\";\nimport * as i5 from \"@angular/common\";\nfunction ResetPasswordPage_ng_container_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const validation_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", validation_r3.message, \" \");\n  }\n}\nfunction ResetPasswordPage_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ResetPasswordPage_ng_container_7_div_1_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const validation_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.resetForm.get(\"email\").hasError(validation_r3.type) && (ctx_r0.resetForm.get(\"email\").dirty || ctx_r0.resetForm.get(\"email\").touched));\n  }\n}\nfunction ResetPasswordPage_ng_container_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const validation_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", validation_r6.message, \" \");\n  }\n}\nfunction ResetPasswordPage_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ResetPasswordPage_ng_container_13_div_1_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const validation_r6 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.resetForm.get(\"password\").hasError(validation_r6.type) && (ctx_r1.resetForm.get(\"password\").dirty || ctx_r1.resetForm.get(\"password\").touched));\n  }\n}\nfunction ResetPasswordPage_ng_container_19_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Passwords Don't Match \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordPage_ng_container_19_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const validation_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", validation_r9.message, \" \");\n  }\n}\nfunction ResetPasswordPage_ng_container_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ResetPasswordPage_ng_container_19_div_1_Template, 2, 0, \"div\", 9);\n    i0.ɵɵtemplate(2, ResetPasswordPage_ng_container_19_div_2_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const validation_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.resetForm.get(\"passwordRepeat\").hasError(\"passwordMismatch\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.resetForm.get(\"password\").hasError(validation_r9.type) && (ctx_r2.resetForm.get(\"password\").dirty || ctx_r2.resetForm.get(\"password\").touched));\n  }\n}\nexport let ResetPasswordPage = /*#__PURE__*/(() => {\n  class ResetPasswordPage {\n    constructor(http, navCtrl, formBuilder, customValidator, platform) {\n      this.http = http;\n      this.navCtrl = navCtrl;\n      this.formBuilder = formBuilder;\n      this.customValidator = customValidator;\n      this.platform = platform;\n      this.passwordInput = \"\";\n      this.passwordConfirmInput = \"\";\n      // responsible for printing error messages to the screen based on validator \n      this.validation_messages = {\n        'password': [{\n          type: 'required',\n          message: 'A password is required.'\n        }],\n        'passwordRepeat': [{\n          type: 'required',\n          message: 'A password is required.'\n        }]\n      };\n      this.resetForm = formBuilder.group({\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.required])],\n        passwordRepeat: ['', Validators.compose([Validators.maxLength(30), Validators.required])]\n      }, {\n        validator: this.customValidator.passwordMatchValidator('password', 'passwordRepeat')\n      });\n    }\n    validatePasswordReset() {\n      console.log(this.resetForm.value);\n      // Get the unique selector (basically username) and validator (basically encrypted password) for the password reset that was concatenated \n      // with the password reset URL in the link sent to the user's email\n      var selector = this.platform.getQueryParam('selector');\n      var validator = this.platform.getQueryParam('validator');\n      console.log(\"Selector: \" + selector);\n      console.log(\"Validator: \" + validator);\n      if (!this.resetForm.valid) {\n        console.log(\"INVALID\");\n      } else {\n        console.log(\"VALID\");\n        // Find a way to get email and password input from user\n        var obj = {\n          func: \"verify_reset\",\n          password: this.resetForm.value['password'],\n          passwordRepeat: this.resetForm.value['passwordRepeat'],\n          selector: selector,\n          validator: validator\n        };\n        this.http.post(\"https://recycle.hpc.tcnj.edu/php/password-resets-handler.php\", JSON.stringify(obj)).subscribe(data => {\n          var result = data;\n          if (result['missingInput']) {\n            // output to user it succeeded and move to next page\n            console.log(\"missing Input\");\n          } else {\n            // dont move to next page and output error message \"Email or password entered was incorrect\"\n            console.log(\"email sent\");\n          }\n        });\n      }\n    }\n  }\n  ResetPasswordPage.ɵfac = function ResetPasswordPage_Factory(t) {\n    return new (t || ResetPasswordPage)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.NavController), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.CustomValidationService), i0.ɵɵdirectiveInject(i2.Platform));\n  };\n  ResetPasswordPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordPage,\n    selectors: [[\"app-reset-password\"]],\n    decls: 24,\n    vars: 4,\n    consts: [[2, \"padding\", \"0\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"validation-errors\"], [4, \"ngFor\", \"ngForOf\"], [\"lines\", \"full\"], [\"position\", \"floating\"], [\"formControlName\", \"password\", \"type\", \"password\", \"required\", \"\"], [\"formControlName\", \"passwordRepeat\", \"type\", \"password\", \"required\", \"\"], [\"aria-label\", \"change password\", \"type\", \"submit\", \"color\", \"success\", \"expand\", \"block\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"]],\n    template: function ResetPasswordPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\", 0);\n        i0.ɵɵtext(3, \" Reset Password \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\")(5, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordPage_Template_form_ngSubmit_5_listener() {\n          return ctx.validatePasswordReset();\n        });\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵtemplate(7, ResetPasswordPage_ng_container_7_Template, 2, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"ion-item\", 4)(9, \"ion-label\", 5);\n        i0.ɵɵtext(10, \"New Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"ion-input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 2);\n        i0.ɵɵtemplate(13, ResetPasswordPage_ng_container_13_Template, 2, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-item\", 4)(15, \"ion-label\", 5);\n        i0.ɵɵtext(16, \"Confirm New Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"ion-input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 2);\n        i0.ɵɵtemplate(19, ResetPasswordPage_ng_container_19_Template, 3, 2, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"ion-row\")(21, \"ion-col\")(22, \"ion-button\", 8);\n        i0.ɵɵtext(23, \"Change Password\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.validation_messages.email);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.validation_messages.password);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.validation_messages.password);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i2.IonButton, i2.IonCol, i2.IonContent, i2.IonHeader, i2.IonInput, i2.IonItem, i2.IonLabel, i2.IonRow, i2.IonTitle, i2.IonToolbar, i2.TextValueAccessor, i3.ɵNgNoValidate, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".validation-errors[_ngcontent-%COMP%]{color:red;margin:10px;font-size:75%}\"]\n  });\n  return ResetPasswordPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}