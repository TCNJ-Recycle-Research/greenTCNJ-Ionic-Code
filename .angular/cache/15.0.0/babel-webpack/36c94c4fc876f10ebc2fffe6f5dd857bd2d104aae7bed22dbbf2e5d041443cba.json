{"ast":null,"code":"import { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { filter, map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, router, http) {\n      this.authService = authService;\n      this.router = router;\n      this.http = http;\n    }\n    canLoad() {\n      return this.authService.isAuthenticated.pipe(filter(val => val !== null),\n      // Filter out initial Behaviour subject value\n      take(1),\n      // Otherwise the Observable doesn't complete!\n      map(isAuthenticated => {\n        if (isAuthenticated) {\n          return true;\n        } else {\n          this.router.navigateByUrl('/start');\n          return false;\n        }\n      }));\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}